import userModel from "../models/userModel.js";
import validator from 'validator';
import bcrypt from 'bcrypt'
import jwt from 'jsonwebtoken';

const createToken = (id) => {
  //token generated from jwt 
  //sign(object, secret key)
  return jwt.sign({id}, process.env.JWT_SECRET);
} 

//Route for user login
const loginUser = async (req, res) => {

}

//Route for user registration
const registerUser = async (req, res) => {
     
    //res.json({msg: "Register API working"})
    try{
       
       //get name, email, password from req.body
       const {name, email, password} = req.body;
       const normalizedEmail = email.toLowerCase(); 
       //checking user already exists or not

       const exists = await userModel.findOne({email})

       if(exists){
         return res.json({success: false, msg: "user already exists"})
       }

       // validating email format and strong password
       if(!validator.isEmail(email)){
         return res.json({success: false, msg: "please enter a valid email"})
       }

       if(password.length < 8){
         return res.json({success: false, msg: "please enter a string password"})
       }

       //If i reach here means email & password are valid , create account now
       //Hashing user password
       const salt = await bcrypt.genSalt(10); // provide num in getSalg from 5 to 15 , the larger, it will  take more time
       const hashedPassword = await bcrypt.hash(password, salt);
      //now we have validated email, name and hashed password pass them to userModel to create account
       const newUser= new userModel({
        name,
        email: normalizedEmail, 
        password: hashedPassword
       })
      //save user
      const user = await newUser.save();
     //provide token so that user can login
     //user._id is autogenerated in database
     const token = createToken(user._id)
    //send respose
     res.json({success: true, token})
       
    }catch(err){
       console.log(err);
       res.json({success: false, message: err.message})
    }

}

//Route for admin login
const adminLogin = async(req, res) => {

}
export {loginUser, registerUser, adminLogin}